// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: zanzigo/v1/zanzigo.proto

package zanzigov1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/trevex/zanzigo/api/zanzigo/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// ZanzigoServiceName is the fully-qualified name of the ZanzigoService service.
	ZanzigoServiceName = "zanzigo.v1.ZanzigoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ZanzigoServiceWriteProcedure is the fully-qualified name of the ZanzigoService's Write RPC.
	ZanzigoServiceWriteProcedure = "/zanzigo.v1.ZanzigoService/Write"
	// ZanzigoServiceReadProcedure is the fully-qualified name of the ZanzigoService's Read RPC.
	ZanzigoServiceReadProcedure = "/zanzigo.v1.ZanzigoService/Read"
	// ZanzigoServiceCheckProcedure is the fully-qualified name of the ZanzigoService's Check RPC.
	ZanzigoServiceCheckProcedure = "/zanzigo.v1.ZanzigoService/Check"
)

// ZanzigoServiceClient is a client for the zanzigo.v1.ZanzigoService service.
type ZanzigoServiceClient interface {
	Write(context.Context, *connect.Request[v1.WriteRequest]) (*connect.Response[v1.WriteResponse], error)
	Read(context.Context, *connect.Request[v1.ReadRequest]) (*connect.Response[v1.ReadResponse], error)
	Check(context.Context, *connect.Request[v1.CheckRequest]) (*connect.Response[v1.CheckResponse], error)
}

// NewZanzigoServiceClient constructs a client for the zanzigo.v1.ZanzigoService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewZanzigoServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ZanzigoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &zanzigoServiceClient{
		write: connect.NewClient[v1.WriteRequest, v1.WriteResponse](
			httpClient,
			baseURL+ZanzigoServiceWriteProcedure,
			opts...,
		),
		read: connect.NewClient[v1.ReadRequest, v1.ReadResponse](
			httpClient,
			baseURL+ZanzigoServiceReadProcedure,
			opts...,
		),
		check: connect.NewClient[v1.CheckRequest, v1.CheckResponse](
			httpClient,
			baseURL+ZanzigoServiceCheckProcedure,
			opts...,
		),
	}
}

// zanzigoServiceClient implements ZanzigoServiceClient.
type zanzigoServiceClient struct {
	write *connect.Client[v1.WriteRequest, v1.WriteResponse]
	read  *connect.Client[v1.ReadRequest, v1.ReadResponse]
	check *connect.Client[v1.CheckRequest, v1.CheckResponse]
}

// Write calls zanzigo.v1.ZanzigoService.Write.
func (c *zanzigoServiceClient) Write(ctx context.Context, req *connect.Request[v1.WriteRequest]) (*connect.Response[v1.WriteResponse], error) {
	return c.write.CallUnary(ctx, req)
}

// Read calls zanzigo.v1.ZanzigoService.Read.
func (c *zanzigoServiceClient) Read(ctx context.Context, req *connect.Request[v1.ReadRequest]) (*connect.Response[v1.ReadResponse], error) {
	return c.read.CallUnary(ctx, req)
}

// Check calls zanzigo.v1.ZanzigoService.Check.
func (c *zanzigoServiceClient) Check(ctx context.Context, req *connect.Request[v1.CheckRequest]) (*connect.Response[v1.CheckResponse], error) {
	return c.check.CallUnary(ctx, req)
}

// ZanzigoServiceHandler is an implementation of the zanzigo.v1.ZanzigoService service.
type ZanzigoServiceHandler interface {
	Write(context.Context, *connect.Request[v1.WriteRequest]) (*connect.Response[v1.WriteResponse], error)
	Read(context.Context, *connect.Request[v1.ReadRequest]) (*connect.Response[v1.ReadResponse], error)
	Check(context.Context, *connect.Request[v1.CheckRequest]) (*connect.Response[v1.CheckResponse], error)
}

// NewZanzigoServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewZanzigoServiceHandler(svc ZanzigoServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	zanzigoServiceWriteHandler := connect.NewUnaryHandler(
		ZanzigoServiceWriteProcedure,
		svc.Write,
		opts...,
	)
	zanzigoServiceReadHandler := connect.NewUnaryHandler(
		ZanzigoServiceReadProcedure,
		svc.Read,
		opts...,
	)
	zanzigoServiceCheckHandler := connect.NewUnaryHandler(
		ZanzigoServiceCheckProcedure,
		svc.Check,
		opts...,
	)
	return "/zanzigo.v1.ZanzigoService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ZanzigoServiceWriteProcedure:
			zanzigoServiceWriteHandler.ServeHTTP(w, r)
		case ZanzigoServiceReadProcedure:
			zanzigoServiceReadHandler.ServeHTTP(w, r)
		case ZanzigoServiceCheckProcedure:
			zanzigoServiceCheckHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedZanzigoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedZanzigoServiceHandler struct{}

func (UnimplementedZanzigoServiceHandler) Write(context.Context, *connect.Request[v1.WriteRequest]) (*connect.Response[v1.WriteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zanzigo.v1.ZanzigoService.Write is not implemented"))
}

func (UnimplementedZanzigoServiceHandler) Read(context.Context, *connect.Request[v1.ReadRequest]) (*connect.Response[v1.ReadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zanzigo.v1.ZanzigoService.Read is not implemented"))
}

func (UnimplementedZanzigoServiceHandler) Check(context.Context, *connect.Request[v1.CheckRequest]) (*connect.Response[v1.CheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zanzigo.v1.ZanzigoService.Check is not implemented"))
}
